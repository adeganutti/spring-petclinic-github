//noinspection GroovyUnusedAssignment
@Library("jenkins-libraries@main") _

def runParallel = true

def SONARQUBE_ENV = "Sonarqube"
def SONARQUBE_CREDENTIAL_ID = "sonar-jenkins-user"
def ARTIFACTORY_SERVER_ID = "artifactory-server-saas"
def ARTIFACTORY_SERVER_URL = "https://springpetclinictestpro.jfrog.io/"
def ARTIFACTORY_REPOSITORY_URL = "artifactory/example-repo-local/"
def ARTIFACTORY_BUILD_NAME = "springpetclinic"
def ARTIFACTORY_PROJECT = "spc"
def ARTIFACTORY_CREDENTIAL_ID = "artifactory-jenkins-user"
def NEXUS_SERVER_URL = "10.3.1.6:8081"
def NEXUS_REPOSITORY_NAME = "emerasoft-maven-nexus-repo"
def NEXUS_VERSION = "nexus3"
def NEXUS_PROTOCOL = "http"
def NEXUS_CREDENTIAL_ID = "sonatype-jenkins-user"
def NEXUS_APPLICATION = "spring-petclinic"
def OKTETO_SERVER_URL = "https://cloud.okteto.com"
def OKTETO_TOKEN = "joXe00ffVhLf6wDadoPatXkvLQrMJ2zpsR3HO20yZSi2GkpX"
def OKTETO_GITHUB_REPOSITORY_NAME = "spring-petclinic-github"
def OKTETO_GITHUB_REPOSITORY_URL = "https://github.com/adeganutti/spring-petclinic-github.git"
def OKTETO_DEPLOYMENT_NAME = "spc"

node {
    try {
        stage('Maven Build') {
            checkout scm
            sh "mvn clean install"
        }

        stage('Maven Test') {
            sh 'mvn test'
        }

        stage('Analysis') {
            def analysisStagesMap = [:]
            analysisStagesMap.put("JaCoCo Analysis", jaCoCoAnalysis())
            analysisStagesMap.put("SonarQube Analysis", sonarQubeAnalysis(SONARQUBE_ENV, SONARQUBE_CREDENTIAL_ID))
            analysisStagesMap.put("Nexus IQ Analysis", nexusIqAnalysis(NEXUS_APPLICATION))
            parallelOrSerialStages.call(runParallel, analysisStagesMap)
        }

        stage('Maven Package') {
            sh "mvn package -DskipTests=true"
        }

        stage('Artifact Repository Push') {
            def artifactRepositoryStagesMap = [:]
            artifactRepositoryStagesMap.put("Artifactory Repository Push", artifactoryRepositoryPush(ARTIFACTORY_SERVER_ID, ARTIFACTORY_SERVER_URL, ARTIFACTORY_REPOSITORY_URL, ARTIFACTORY_BUILD_NAME, ARTIFACTORY_PROJECT, ARTIFACTORY_CREDENTIAL_ID))
            artifactRepositoryStagesMap.put("Nexus Repository Push", nexusRepositoryPush(NEXUS_SERVER_URL, NEXUS_REPOSITORY_NAME, NEXUS_VERSION, NEXUS_PROTOCOL, NEXUS_CREDENTIAL_ID))
            parallelOrSerialStages.call(runParallel, artifactRepositoryStagesMap)
        }

        stage("Deploy") {
            okteto.call(OKTETO_SERVER_URL, OKTETO_TOKEN, OKTETO_GITHUB_REPOSITORY_NAME, OKTETO_GITHUB_REPOSITORY_URL, OKTETO_DEPLOYMENT_NAME)
        }
    } catch (e) {
        throw e
    } finally {
        junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml'
    }
}

def jaCoCoAnalysis() {
    return {
        stage('JaCoCo Analysis') {
            jacoco(execPattern: 'target/jacoco.exec')
        }
    } as Object
}

def sonarQubeAnalysis(sonarqubeEnv, sonarqubeCredentialId) {
    return {
        stage('SonarQube Analysis') {
            sonarqube.call(sonarqubeEnv, sonarqubeCredentialId)
        }
    } as Object
}

def nexusIqAnalysis(nexusApplication) {
    return {
        stage('Nexus IQ Analysis') {
            nexusPolicyEvaluation advancedProperties: '', enableDebugLogging: false, failBuildOnNetworkError: false, iqApplication: selectedApplication(nexusApplication), iqStage: 'build', jobCredentialsId: ''
        }
    } as Object
}

def artifactoryRepositoryPush(artifactoryServerId, artifactoryServerUrl, artifactoryRepositoryUrl, artifactoryBuildName, artifactoryProject, artifactoryCredentialId) {
    return {
        stage('Artifactory Repository Push') {
            artifactory.call(artifactoryServerId, artifactoryServerUrl, artifactoryRepositoryUrl, artifactoryBuildName, artifactoryProject, artifactoryCredentialId)
        }
    } as Object
}

def nexusRepositoryPush(nexusServerUrl, nexusRepositoryName, nexusVersion, nexusProtocol, nexusCredentialId) {
    return {
        stage('Nexus Repository Push') {
            nexusRepository.call(nexusServerUrl, nexusRepositoryName, nexusVersion, nexusProtocol, nexusCredentialId)
        }
    } as Object
}
